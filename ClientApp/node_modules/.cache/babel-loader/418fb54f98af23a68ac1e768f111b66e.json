{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sge\\\\Desktop\\\\leet shit\\\\Websites\\\\Portfolio-Rewrite\\\\ClientApp\\\\src\\\\pages\\\\StoryPage\\\\StoryPage.js\";\nimport React, { Component } from 'react';\nimport axios from '../../axios-orders';\nimport PageModal from '../../components/PageModal/PageModal';\nimport TextModal from '../../components/TextModal/TextModal';\nimport StoryButton from '../../components/Story/StoryButton/StoryButton'; // I like the idea of messages coming into view from left, exiting to the right. Nice and orderly, like a play!\n\nimport classes from './StoryPage.module.css'; // Def need to code in some authentication!!!\n// I should probably refactor my code so I have some functions that set the state of the scene, and another that uses that data to generate ui features.\n// TODOS\n// Refactor scene updating logic - function should take a scene object and normalize state based off of that. should return a promise that can be consumed by another function which will render the HTML based off of the new and updated state!\n\nvar storyPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(storyPage, _Component);\n\n  function storyPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, storyPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(storyPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // modalInView: false, not rdy\n      display: {\n        introMessages: true,\n        buttonBox: false,\n        storyButtons: [],\n        shouldGenerateStoryButtons: false\n      },\n      story: {\n        selected: null,\n        currentScene: null,\n        isEndScene: false\n      },\n      // Initial repository of story data. Used to generate more specific groups of data.\n      storyCollection: [],\n      // generates arrays of JSX\n      // true after componentDidMount, next update triggers button rendering\n      shouldGenerateStoryButtons: false\n    };\n    _this.pageModalRef = React.createRef();\n\n    _this.scrollPageModal = function () {\n      return window.scrollTo(0, _this.pageModalRef.current.offsetTop);\n    };\n\n    _this.addStoriesToState = function (storyInput) {\n      var storyArray;\n\n      if (!Array.isArray(storyInput)) {\n        storyArray = [storyArray];\n      } else {\n        storyArray = storyInput; // storyArray = Object.values(storyInput[0]).map(val => val);\n      }\n\n      localStorage.setItem('stories', JSON.stringify(storyArray)); // localStorage.setItem('storyInfoLoaded', 'true');\n\n      storyArray.forEach(function (story) {\n        _this.setState(function (oldState) {\n          return _objectSpread({}, oldState, {\n            display: _objectSpread({}, oldState.display),\n            storyCollection: _toConsumableArray(oldState.storyCollection)\n          });\n        });\n      });\n    };\n\n    _this.optionHandler = function (e) {\n      var nextSceneLocator = e.target.getAttribute(\"data-associatedscene\");\n      var nextScene = _this.state.story.selected.scenes[nextSceneLocator];\n\n      _this.updateStateToNextScene(nextScene, nextSceneLocator);\n    };\n\n    _this.updateStateToNextScene =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(scene, identifier) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.setState(function (oldState) {\n                  var isEndScene; // console.log(scene.options.first)\n\n                  try {\n                    scene.options === undefined ? isEndScene = true : isEndScene = false;\n                    var nextOptionButtons;\n\n                    if (isEndScene) {\n                      nextOptionButtons = [];\n                    } else {\n                      nextOptionButtons = _toConsumableArray(Object.values(scene.options).map(function (optionKeyValArray, index) {\n                        return React.createElement(StoryButton, {\n                          title: optionKeyValArray.label,\n                          description: optionKeyValArray.text,\n                          associatedScene: optionKeyValArray.associatedScene,\n                          key: index,\n                          option: true,\n                          clickHandler: _this.optionHandler,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 203\n                          },\n                          __self: this\n                        });\n                      }));\n                    }\n\n                    return _objectSpread({}, oldState, {\n                      display: _objectSpread({}, oldState.display, {\n                        introMessages: false,\n                        storyButtons: false,\n                        optionButtons: nextOptionButtons,\n                        scene: React.createElement(\"div\", {\n                          className: \"\".concat(classes.sceneModal, \" \").concat(classes.textModal),\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 213\n                          },\n                          __self: this\n                        }, React.createElement(TextModal, {\n                          title: scene.title,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 214\n                          },\n                          __self: this\n                        }, Array.isArray(scene.text) ? scene.text.map(function (textLine, key) {\n                          return React.createElement(\"p\", {\n                            className: classes.multiLine,\n                            key: key,\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 215\n                            },\n                            __self: this\n                          }, textLine);\n                        }) : scene.text))\n                      }),\n                      storyCollection: _toConsumableArray(oldState.storyCollection),\n                      story: _objectSpread({}, oldState.story, {\n                        selected: oldState.story.selected,\n                        currentScene: _objectSpread({}, scene, {\n                          scene: identifier\n                        }),\n                        isEndScene: isEndScene\n                      })\n                    });\n                  } catch (error) {\n                    console.log(\"Scene likely not implemented.\\n\" + error);\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.switchToSelectedStory = function (e) {\n      e.stopPropagation();\n      var storyToLoad = e.target.getAttribute(\"data-id\");\n      console.log(storyToLoad);\n\n      var selectedStory = _this.state.storyCollection.filter(function (story) {\n        if (story.title === storyToLoad) {\n          return true;\n        } else return false;\n      });\n\n      _this.setState(function (oldState) {\n        return _objectSpread({}, oldState, {\n          display: _objectSpread({}, oldState.display, {\n            introMessages: false,\n            storyButtons: false,\n            optionButtons: _toConsumableArray(Object.values(selectedStory[0].scenes.first.options).map(function (optionKeyValArray, index) {\n              return React.createElement(StoryButton, {\n                title: optionKeyValArray.label,\n                description: optionKeyValArray.text,\n                associatedScene: optionKeyValArray.associatedScene,\n                key: index,\n                option: true,\n                clickHandler: _this.optionHandler,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 253\n                },\n                __self: this\n              });\n            })),\n            scene: React.createElement(\"div\", {\n              className: \"\".concat(classes.sceneModal, \" \").concat(classes.textModal),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 256\n              },\n              __self: this\n            }, React.createElement(TextModal, {\n              title: selectedStory[0].scenes.first.title,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 257\n              },\n              __self: this\n            }, Array.isArray(selectedStory[0].scenes.first.text) ? selectedStory[0].scenes.first.text.map(function (textLine, key) {\n              return React.createElement(\"p\", {\n                className: classes.multiLine,\n                key: key,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 259\n                },\n                __self: this\n              }, textLine);\n            }) : selectedStory[0].scenes.first.text))\n          }),\n          storyCollection: _toConsumableArray(oldState.storyCollection),\n          story: {\n            selected: selectedStory[0],\n            currentScene: _objectSpread({}, selectedStory[0].scenes.first, {\n              scene: \"first\"\n            }),\n            sceneOptions: Object.values(selectedStory[0].scenes.first.options)\n          }\n        });\n      });\n    };\n\n    _this.selectStoryHandler = function (e) {\n      _this.setState(function (oldState) {\n        return _objectSpread({}, oldState, {\n          shouldGenerateStoryButtons: true,\n          story: {\n            selected: null,\n            currentScene: null,\n            isEndScene: false\n          },\n          display: {\n            introMessages: true,\n            buttonBox: false,\n            storyButtons: [],\n            shouldGenerateStoryButtons: false\n          }\n        });\n      });\n    };\n\n    _this.apiPaths = {\n      // gets all test data\n      everything: \"https://localhost:5001/api/story\",\n      firebase: \"https://websage-mph.firebaseio.com/\",\n      test: 'https://websage-mph.firebaseio.com/stories.json'\n    };\n    _this.selectAnotherStoryButton = React.createElement(StoryButton, {\n      title: \"Select Another Story?\",\n      option: true,\n      clickHandler: _this.selectStoryHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    });\n    _this.introMessages = {\n      first: React.createElement(\"div\", {\n        className: \"\".concat(classes.introModal, \" \").concat(classes.textModal, \" \").concat(classes.firstIntro, \" \").concat(_this.state.display.introMessages ? '' : classes.Hide),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(TextModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"Welcome to \", React.createElement(\"span\", {\n        className: classes.textEmphasis,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"Vistelse!\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, \"Vistelse is the Swedish word for sojourn, but more importantly, it's the name of this 'choose your own adventure' app.\"))),\n      second: React.createElement(\"div\", {\n        className: \"\".concat(classes.introModal, \" \").concat(classes.textModal, \" \").concat(_this.state.display.introMessages ? '' : classes.Hide, \" \").concat(classes.secondIntro),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(TextModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \"Right now I only have one story, but I'm capable of holding a lot more. Check back soon!\"))),\n      third: React.createElement(\"div\", {\n        className: \"\".concat(classes.introModal, \" \").concat(classes.textModal, \" \").concat(_this.state.display.introMessages ? '' : classes.Hide, \" \").concat(classes.thirdIntro, \" \"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(TextModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: classes.initiallyDisplayedMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Select your \", React.createElement(\"i\", {\n        className: classes.Papyrus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"experience.\"))))\n    };\n    return _this;\n  }\n\n  _createClass(storyPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Code animating the initial messages into view goes here\n      this.loadMessage(\"first\").then(function (response) {\n        return _this2.wait(1000);\n      }).then(function (response) {\n        return _this2.loadMessage(\"second\");\n      }).then(function (response) {\n        return _this2.wait(1000);\n      }).then(function (response) {\n        return _this2.loadMessage(\"third\");\n      }).then(function (response) {\n        return _this2.wait(1500);\n      }).then(function (response) {\n        return _this2.loadButtons(\"type: story\");\n      }); // accepts ternary values\n      // Code below should run ASAP, but buttons should not appear until\n      // animations have completed. \n      // Code below deduces if stories are in memory and if not, queries them and stores in memory.\n\n      var retrievedStories;\n\n      if (localStorage.getItem('storyInfoLoaded')) {\n        retrievedStories = JSON.parse(localStorage.getItem('stories'));\n        this.addStoriesToState(retrievedStories);\n        this.setInitialState(retrievedStories);\n      } else {\n        retrievedStories = this.getAllStories().then(function (res) {\n          return res;\n        }).then(function (data) {\n          var storyArray = Object.values(data[0]).map(function (val) {\n            return val;\n          });\n\n          _this2.addStoriesToState(storyArray);\n\n          localStorage.setItem(\"stories\", JSON.stringify(storyArray));\n          localStorage.setItem(\"storyInfoLoaded\", \"true\");\n          return storyArray;\n        }).then(function (data) {\n          _this2.setInitialState(data);\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.shouldGenerateStoryButtons) {\n        this.generateStoryButtons();\n      }\n    }\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;\n      var shouldScrollPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (shouldScrollPage) {\n        this.scrollPageModal();\n      }\n\n      return new Promise(function (res, rej) {\n        // Probably don't need this commented stuff.\n        // this.setState((oldState) => {\n        //     return {\n        //         ...oldState,\n        //         typing: true\n        //     }\n        // })\n        setTimeout(function () {\n          // this.setState((oldState) => {\n          //     return {\n          //         ...oldState,\n          //         typing: false\n          //     }\n          // })\n          res('Successfully typed');\n        }, duration);\n      });\n    }\n  }, {\n    key: \"loadMessage\",\n    value: function loadMessage(MsgToDisplay) {\n      var _this3 = this;\n\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n      return new Promise(function (res, rej) {\n        _this3.setState(function (oldState) {\n          var newState = _objectSpread({}, oldState); // console.log(MsgToDisplay)\n\n\n          newState.display[MsgToDisplay] = true;\n          return newState;\n        });\n\n        setTimeout(function () {\n          res(\"Loaded \".concat(MsgToDisplay, \" message\"));\n        }, duration);\n      });\n    }\n  }, {\n    key: \"generateStoryButtons\",\n    value: function generateStoryButtons() {\n      var _this4 = this;\n\n      // Make array of storybutton components, returning null if story.scenes has no data.\n      var storyButtons = this.state.storyCollection.map(function (story, index) {\n        if (story.scenes) {\n          return React.createElement(StoryButton, {\n            key: story[\"_id\"] + index,\n            id: story.title,\n            title: story.title,\n            description: story.description,\n            clickHandler: _this4.switchToSelectedStory,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          });\n        } else {\n          return null;\n        }\n      }); // Updates state, shouldGenerateStoryButtons made false to avoid getting stuck in loop\n\n      this.setState(function (oldState) {\n        return _objectSpread({}, oldState, {\n          display: _objectSpread({}, oldState.display, {\n            storyButtons: storyButtons\n          }),\n          shouldGenerateStoryButtons: false,\n          storyCollection: _toConsumableArray(oldState.storyCollection)\n        });\n      });\n    }\n  }, {\n    key: \"setInitialState\",\n    value: function setInitialState(retrievedStories) {\n      this.setState(function (oldState) {\n        return _objectSpread({}, oldState, {\n          display: _objectSpread({}, oldState.display),\n          storyCollection: _toConsumableArray(retrievedStories),\n          shouldGenerateStoryButtons: true\n        });\n      });\n    }\n  }, {\n    key: \"getAllStories\",\n    value: function () {\n      var _getAllStories = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this5 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (res, rej) {\n                  // const allStories = \n                  axios.get(_this5.apiPaths.test).then(function (res) {\n                    // console.log(JSON.parse(res.request.response));\n                    return [JSON.parse(res.request.response)];\n                  }).then(function (response) {\n                    return res(response);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAllStories() {\n        return _getAllStories.apply(this, arguments);\n      }\n\n      return getAllStories;\n    }() // this handles clicks on the option buttons.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var buttonBoxClasses = [classes.ButtonBox];\n      buttonBoxClasses.push(this.state.display.introMessages === true ? classes.intro : '');\n      return React.createElement(PageModal, {\n        className: \"story\",\n        onScreen: this.state.modalInView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\".concat(classes.pageWrapper),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\".concat(classes.messageWrapper),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, this.state.display.introMessages ? [this.introMessages.first, this.introMessages.second, this.introMessages.third] : null, this.state.display.scene), React.createElement(\"div\", {\n        className: buttonBoxClasses.join(' '),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, this.state.display.storyButtons, this.state.display.optionButtons ? this.state.display.optionButtons : null, this.state.story.isEndScene ? this.selectAnotherStoryButton : null)));\n    }\n  }]);\n\n  return storyPage;\n}(Component);\n\nexport default storyPage;","map":{"version":3,"sources":["C:\\Users\\Sge\\Desktop\\leet shit\\Websites\\Portfolio-Rewrite\\ClientApp\\src\\pages\\StoryPage\\StoryPage.js"],"names":["React","Component","axios","PageModal","TextModal","StoryButton","classes","storyPage","state","display","introMessages","buttonBox","storyButtons","shouldGenerateStoryButtons","story","selected","currentScene","isEndScene","storyCollection","pageModalRef","createRef","scrollPageModal","window","scrollTo","current","offsetTop","addStoriesToState","storyInput","storyArray","Array","isArray","localStorage","setItem","JSON","stringify","forEach","setState","oldState","optionHandler","e","nextSceneLocator","target","getAttribute","nextScene","scenes","updateStateToNextScene","scene","identifier","options","undefined","nextOptionButtons","Object","values","map","optionKeyValArray","index","label","text","associatedScene","optionButtons","sceneModal","textModal","title","textLine","key","multiLine","error","console","log","switchToSelectedStory","stopPropagation","storyToLoad","selectedStory","filter","first","sceneOptions","selectStoryHandler","apiPaths","everything","firebase","test","selectAnotherStoryButton","introModal","firstIntro","Hide","textEmphasis","second","secondIntro","third","thirdIntro","initiallyDisplayedMessage","Papyrus","loadMessage","then","response","wait","loadButtons","retrievedStories","getItem","parse","setInitialState","getAllStories","res","data","val","generateStoryButtons","duration","shouldScrollPage","Promise","rej","setTimeout","MsgToDisplay","newState","description","get","request","buttonBoxClasses","ButtonBox","push","intro","modalInView","pageWrapper","messageWrapper","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport axios from '../../axios-orders';\r\n\r\nimport PageModal from '../../components/PageModal/PageModal';\r\nimport TextModal from '../../components/TextModal/TextModal';\r\nimport StoryButton from '../../components/Story/StoryButton/StoryButton';\r\n\r\n// I like the idea of messages coming into view from left, exiting to the right. Nice and orderly, like a play!\r\n\r\nimport classes from './StoryPage.module.css';\r\n\r\n// Def need to code in some authentication!!!\r\n// I should probably refactor my code so I have some functions that set the state of the scene, and another that uses that data to generate ui features.\r\n\r\n// TODOS\r\n// Refactor scene updating logic - function should take a scene object and normalize state based off of that. should return a promise that can be consumed by another function which will render the HTML based off of the new and updated state!\r\n\r\nclass storyPage extends Component {\r\n    state = {\r\n        // modalInView: false, not rdy\r\n        display: {\r\n            introMessages: true,\r\n            buttonBox: false,\r\n            storyButtons: [],\r\n            shouldGenerateStoryButtons: false,\r\n        },\r\n        story: {\r\n            selected: null,\r\n            currentScene: null,\r\n            isEndScene: false,\r\n        },\r\n        // Initial repository of story data. Used to generate more specific groups of data.\r\n        storyCollection: [], // generates arrays of JSX\r\n        // true after componentDidMount, next update triggers button rendering\r\n        shouldGenerateStoryButtons: false,\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Code animating the initial messages into view goes here\r\n        this.loadMessage(\"first\")\r\n            .then(response => this.wait(1000))\r\n            .then(response => this.loadMessage(\"second\"))\r\n            .then(response => this.wait(1000))\r\n            .then(response => this.loadMessage(\"third\"))\r\n            .then(response => this.wait(1500))\r\n            .then(response => this.loadButtons(\"type: story\")) // accepts ternary values\r\n        // Code below should run ASAP, but buttons should not appear until\r\n        // animations have completed. \r\n\r\n        // Code below deduces if stories are in memory and if not, queries them and stores in memory.\r\n        let retrievedStories;\r\n        if (localStorage.getItem('storyInfoLoaded')) {\r\n            retrievedStories = JSON.parse(localStorage.getItem('stories'));\r\n            this.addStoriesToState(retrievedStories);\r\n            this.setInitialState(retrievedStories);\r\n        } else {\r\n            retrievedStories = this.getAllStories().then((res) => {\r\n                return res;\r\n            }).then((data) => {\r\n                const storyArray = Object.values(data[0]).map(val => val);\r\n                this.addStoriesToState(storyArray)\r\n                localStorage.setItem(\"stories\", JSON.stringify(storyArray));\r\n                localStorage.setItem(\"storyInfoLoaded\", \"true\");\r\n                return storyArray;\r\n            }).then((data => {\r\n                this.setInitialState(data);\r\n            }))\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.shouldGenerateStoryButtons) {\r\n            this.generateStoryButtons()\r\n        }\r\n    }\r\n\r\n    pageModalRef = React.createRef();\r\n    scrollPageModal = () => window.scrollTo(0, this.pageModalRef.current.offsetTop)\r\n    \r\n    wait(duration = 2000, shouldScrollPage=false) {\r\n        if (shouldScrollPage) {\r\n            this.scrollPageModal();\r\n        }\r\n        return new Promise((res, rej) => {\r\n            // Probably don't need this commented stuff.\r\n            // this.setState((oldState) => {\r\n            //     return {\r\n            //         ...oldState,\r\n            //         typing: true\r\n            //     }\r\n            // })\r\n            setTimeout(() => {\r\n                // this.setState((oldState) => {\r\n                //     return {\r\n                //         ...oldState,\r\n                //         typing: false\r\n                //     }\r\n                // })\r\n                res('Successfully typed')\r\n            }, duration)\r\n        })\r\n    }\r\n\r\n    loadMessage(MsgToDisplay, duration = 1000) {\r\n        return new Promise((res, rej) => {\r\n            this.setState((oldState) => {\r\n                const newState = {\r\n                    ...oldState,\r\n                }\r\n                // console.log(MsgToDisplay)\r\n                newState.display[MsgToDisplay] = true;\r\n                return newState\r\n            })\r\n            setTimeout(() => {\r\n                res(`Loaded ${MsgToDisplay} message`)\r\n            }, duration)\r\n        })\r\n    }\r\n\r\n    generateStoryButtons() {\r\n        // Make array of storybutton components, returning null if story.scenes has no data.\r\n        const storyButtons = this.state.storyCollection.map((story, index) => {\r\n            if (story.scenes) {\r\n                return <StoryButton key={story[\"_id\"] + index} id={story.title} title={story.title} description={story.description} clickHandler={this.switchToSelectedStory} />\r\n            } else {\r\n                return null;\r\n            }\r\n        })\r\n        // Updates state, shouldGenerateStoryButtons made false to avoid getting stuck in loop\r\n        this.setState((oldState) => {\r\n            return {\r\n                ...oldState,\r\n                display: {\r\n                    ...oldState.display,\r\n                    storyButtons: storyButtons\r\n                }, shouldGenerateStoryButtons: false,\r\n                storyCollection: [...oldState.storyCollection],\r\n            }\r\n        })\r\n    }\r\n\r\n    setInitialState(retrievedStories) {\r\n        this.setState((oldState) => {\r\n            return {\r\n                ...oldState,\r\n                display: { ...oldState.display },\r\n                storyCollection: [...retrievedStories],\r\n                shouldGenerateStoryButtons: true,\r\n            }\r\n        })\r\n    }\r\n\r\n    addStoriesToState = storyInput => {\r\n        let storyArray;\r\n        if (!Array.isArray(storyInput)) {\r\n            storyArray = [storyArray];\r\n        } else {\r\n            storyArray = storyInput;\r\n            // storyArray = Object.values(storyInput[0]).map(val => val);\r\n        }\r\n        localStorage.setItem('stories', JSON.stringify(storyArray));\r\n        // localStorage.setItem('storyInfoLoaded', 'true');\r\n        storyArray.forEach(story => {\r\n            this.setState((oldState) => {\r\n                return {\r\n                    ...oldState,\r\n                    display: { ...oldState.display },\r\n                    storyCollection: [...oldState.storyCollection],\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async getAllStories() {\r\n        return new Promise((res, rej) => {\r\n            // const allStories = \r\n            axios.get(this.apiPaths.test).then((res) => {\r\n                // console.log(JSON.parse(res.request.response));\r\n                return [JSON.parse(res.request.response)]\r\n            }).then(response => res(response));\r\n        })\r\n    }\r\n\r\n    // this handles clicks on the option buttons.\r\n    optionHandler = (e) => {\r\n        const nextSceneLocator = e.target.getAttribute(\"data-associatedscene\");\r\n        const nextScene = this.state.story.selected.scenes[nextSceneLocator];\r\n        this.updateStateToNextScene(nextScene, nextSceneLocator);\r\n    }\r\n\r\n    updateStateToNextScene = async (scene, identifier) => {\r\n        this.setState((oldState) => {\r\n            let isEndScene;\r\n            // console.log(scene.options.first)\r\n            try {\r\n                scene.options === undefined ? isEndScene = true : isEndScene = false;\r\n                let nextOptionButtons;\r\n                if (isEndScene) {\r\n                    nextOptionButtons = []\r\n                } else {\r\n                    nextOptionButtons = [...Object.values(scene.options).map((optionKeyValArray, index) => {\r\n                        return <StoryButton title={optionKeyValArray.label} description={optionKeyValArray.text} associatedScene={optionKeyValArray.associatedScene} key={index} option clickHandler={this.optionHandler} />\r\n                    })]\r\n                }\r\n                return {\r\n                    ...oldState, display: {\r\n                        ...oldState.display,\r\n                        introMessages: false,\r\n                        storyButtons: false,\r\n                        optionButtons: nextOptionButtons,\r\n                        scene: (\r\n                            <div className={`${classes.sceneModal} ${classes.textModal}`}>\r\n                                <TextModal title={scene.title}>\r\n                                    {Array.isArray(scene.text) ? scene.text.map((textLine, key) => { return <p className={classes.multiLine} key={key}>{textLine}</p> }) : scene.text}\r\n                                    {/* <p>{Array.isArray(scene.text)? scene.text.join('\\n') : scene.text}</p> */}\r\n                                    {/* <p>{scene.text}</p> */}\r\n                                </TextModal>\r\n                            </div>\r\n                        )\r\n                    },\r\n                    storyCollection: [...oldState.storyCollection],\r\n                    story: {\r\n                        ...oldState.story,\r\n                        selected: oldState.story.selected,\r\n                        currentScene: { ...scene, scene: identifier },\r\n                        isEndScene: isEndScene,\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(\"Scene likely not implemented.\\n\" + error);\r\n            }\r\n        })\r\n    }\r\n\r\n    switchToSelectedStory = (e) => {\r\n        e.stopPropagation();\r\n        const storyToLoad = e.target.getAttribute(\"data-id\"); \r\n        console.log(storyToLoad);\r\n        const selectedStory = this.state.storyCollection.filter(story => {\r\n            if (story.title === storyToLoad) {\r\n                return true\r\n            } else return false;\r\n        });\r\n        this.setState((oldState) => {\r\n            return {\r\n                ...oldState, display: {\r\n                    ...oldState.display,\r\n                    introMessages: false,\r\n                    storyButtons: false,\r\n                    optionButtons: [...Object.values(selectedStory[0].scenes.first.options).map((optionKeyValArray, index) => {\r\n                        return <StoryButton title={optionKeyValArray.label} description={optionKeyValArray.text} associatedScene={optionKeyValArray.associatedScene} key={index} option clickHandler={this.optionHandler} />\r\n                    })],\r\n                    scene: (\r\n                        <div className={`${classes.sceneModal} ${classes.textModal}`}>\r\n                            <TextModal title={selectedStory[0].scenes.first.title}>\r\n\r\n                                {Array.isArray(selectedStory[0].scenes.first.text) ? selectedStory[0].scenes.first.text.map((textLine, key) => { return <p className={classes.multiLine} key={key}>{textLine}</p> }) : selectedStory[0].scenes.first.text}\r\n                                {/* <p>{Array.isArray(selectedStory[0].scenes.first.text)? selectedStory[0].scenes.first.text.join('\\n') : selectedStory[0].scenes.first.text}</p> */}\r\n                                {/* <p>{selectedStory[0].scenes.first.`text}</p> */}\r\n                            </TextModal>\r\n                        </div>\r\n                    )\r\n                },\r\n                storyCollection: [...oldState.storyCollection],\r\n                story: {\r\n                    selected: selectedStory[0],\r\n                    currentScene: { ...selectedStory[0].scenes.first, scene: \"first\" },\r\n                    sceneOptions: Object.values(selectedStory[0].scenes.first.options)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    selectStoryHandler = (e) => {\r\n        this.setState((oldState) => {\r\n            return {\r\n                ...oldState,\r\n                shouldGenerateStoryButtons: true,\r\n                story: {\r\n                    selected: null,\r\n                    currentScene: null,\r\n                    isEndScene: false,\r\n                },\r\n                display: {\r\n                    introMessages: true,\r\n                    buttonBox: false,\r\n                    storyButtons: [],\r\n                    shouldGenerateStoryButtons: false,\r\n                },\r\n            };\r\n        })\r\n    }\r\n\r\n    // Object holding different API pathway reference attributes.\r\n    apiPaths = {\r\n        // gets all test data\r\n        everything: \"https://localhost:5001/api/story\",\r\n        firebase: \"https://websage-mph.firebaseio.com/\",\r\n        test: 'https://websage-mph.firebaseio.com/stories.json',\r\n    }\r\n\r\n\r\n    selectAnotherStoryButton = (\r\n        <StoryButton title=\"Select Another Story?\" option clickHandler={this.selectStoryHandler} />\r\n    )\r\n    // Some JSX I wanted to get out of the render method. \r\n    introMessages = {\r\n        first: (\r\n            <div className={`${classes.introModal} ${classes.textModal} ${classes.firstIntro} ${this.state.display.introMessages ? '' : classes.Hide}`}>\r\n                <TextModal>\r\n                    <h3>Welcome to <span className={classes.textEmphasis}>Vistelse!</span></h3>\r\n                    <p>Vistelse is the Swedish word for sojourn, but more importantly, it's the name of this 'choose your own adventure' app.</p>\r\n                </TextModal>\r\n            </div>\r\n        ),\r\n        second: (\r\n            <div className={`${classes.introModal} ${classes.textModal} ${this.state.display.introMessages ? '' : classes.Hide} ${classes.secondIntro}`}>\r\n                <TextModal>\r\n                    <p>Right now I only have one story, but I'm capable of holding a lot more. Check back soon!</p>\r\n                </TextModal>\r\n            </div>\r\n        ),\r\n        third: (\r\n            <div className={`${classes.introModal} ${classes.textModal} ${this.state.display.introMessages ? '' : classes.Hide} ${classes.thirdIntro} `}>\r\n                <TextModal>\r\n                    <p className={classes.initiallyDisplayedMessage}>\r\n                        Select your <i className={classes.Papyrus}>experience.</i>\r\n                    </p>\r\n                </TextModal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let buttonBoxClasses = [classes.ButtonBox];\r\n        buttonBoxClasses.push(this.state.display.introMessages === true ? classes.intro : '');\r\n        return (\r\n            <PageModal className={\"story\"} onScreen={this.state.modalInView} >\r\n                <div className={`${classes.pageWrapper}`}>\r\n                    <div className={`${classes.messageWrapper}`}>\r\n                        {this.state.display.introMessages ? [\r\n                            this.introMessages.first,\r\n                            this.introMessages.second,\r\n                            this.introMessages.third\r\n                        ] : null}\r\n                        {this.state.display.scene}\r\n                    </div>\r\n                    <div className={buttonBoxClasses.join(' ')}>\r\n                        {this.state.display.storyButtons}\r\n                        {this.state.display.optionButtons ? this.state.display.optionButtons : null}\r\n                        {this.state.story.isEndScene ? this.selectAnotherStoryButton : null}\r\n                    </div>\r\n                </div>\r\n            </PageModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default storyPage;"]},"metadata":{},"sourceType":"module"}